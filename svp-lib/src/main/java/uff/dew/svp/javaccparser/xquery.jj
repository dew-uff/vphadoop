/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. xquery.jj */
/*@egen*/options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;                 
}

PARSER_BEGIN(XQueryParser)

package mediadorxml.javaccparser;
public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTXQueryParserState jjtree = new JJTXQueryParserState();

/*@egen*/}

PARSER_END(XQueryParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <COMMENT: "(:" (~[":"])* ":" (":" | (~[":",")"] (~[":"])* ":"))* ")">
| <SEMICOLON: ";">
| <COMMA: ",">
| <EQUALS: "=">
| <L_PAREN: "(">
| <R_PAREN: ")">
| <L_BRACKET: "[">
| <R_BRACKET: "]">
| <L_BRACE: "{">
| <R_BRACE: "}">
| <OR: "or" | "OR" | "Or">
| <AND: "and" |"AND" | "And">
| <BAR: "|">
| <UNION: "union" | "UNION">
| <PLUS: "+">
| <MINUS: "-">
| <FOR: "for" | "FOR">
| <LET: "let" | "LET">
| <WHERE: "where" | "WHERE">
| <RETURN: "return" | "RETURN">
| <IN: "in" | "IN">
| <ASSIGN: ":=">
| <SLASH: "/">
| <SLASHSLASH: "//">
| <DOLLAR: "$">
| <LESS_THAN: "<">
| <LESS_THAN_SLASH: "</">
| <LESS_THAN_EQUALS: "<=">
| <GREATER_THAN: ">">
| <SLASH_GREATER_THAN: "/>">
| <GREATER_THAN_EQUALS: ">=">
| <NOT_EQUALS: "!=">
| <UNDERSCORE: "_">
| <SINGLEQUOTE: "'">
| <QUOTE: "\"">
| <DOCUMENT: "doc" | "DOC" | "document" | "DOCUMENT" | "collection" | "COLLECTION">
| <XML: ".xml" | ".XML">
| <AT: "@">
| <ASCENDING: "ascending" | "ASCENDING">
| <DESCENDING: "descending" | "DESCENDING">
| <COUNT: "count" | "COUNT">
| <MAX: "max" | "MAX">
| <MIN: "min" | "MIN">
| <AVERAGE: "avg" | "AVG">
| <SUM: "sum" | "SUM">

| <IDENTIFIER:  (<AT>)? (<LETTER> | <UNDERSCORE>) (<NCNAMECHAR>)* >

| < #NCNAMECHAR:  <LETTER> | <DIGIT> | <MINUS> | <UNDERSCORE> | <COMBININGCHAR> | <EXTENDER>
  >

| <DIGITS: (["0"-"9"])+>

| <HEXDIGITS: ["0"-"9"] | ["a"-"f"] | (["A"-"F"])+ >

| < #LETTER: <BASECHAR> | <IDEOGRAPHIC>>

| <DECIMALLITERAL:  ("." (["0"-"9"])+) | ((["0"-"9"])+ "." (["0"-"9"])*)>

| <DOUBLELITERAL :  (("." (["0"-"9"])+) | ((["0"-"9"])+ ("." (["0"-"9"])*)?)) ("e" | "E") ("+" | "-")?>

| <STRINGLITERAL:
      <QUOTE>
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      <QUOTE>
  >

| <#CHARREF: "&#" (<DIGITS> | ("x" <HEXDIGITS>)) ";">

| <#PREDEFINEDENTITYREF: "&" ("lt" | "gt" | "amp" | "quot" | "apos") ";">

| <#BASECHAR: [
                "A"-"Z", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6",
                "\u00f8"-"\u00ff", "\u0100"-"\u0131", "\u0134"-"\u013e", "\u0141"-"\u0148",
                "\u014a"-"\u017e", "\u0180"-"\u01c3", "\u01cd"-"\u01f0", "\u01f4"-"\u01f5",
                "\u01fa"-"\u0217", "\u0250"-"\u02a8", "\u02bb"-"\u02c1", "\u0386", "\u0388"-"\u038a",
                "\u038c", "\u038e"-"\u03a1", "\u03a3"-"\u03ce", "\u03d0"-"\u03d6",
                "\u03da", "\u03dc", "\u03de", "\u03e0", "\u03e2"-"\u03f3",
                "\u0401"-"\u040c", "\u040e"-"\u044f", "\u0451"-"\u045c", "\u045e"-"\u0481",
                "\u0490"-"\u04c4", "\u04c7"-"\u04c8", "\u04cb"-"\u04cc", "\u04d0"-"\u04eb",
                "\u04ee"-"\u04f5","\u04f8"-"\u04f9","\u0531"-"\u0556", "\u0559", "\u0561"-"\u0586",
                "\u05d0"-"\u05ea", "\u05f0"-"\u05f2", "\u0621"-"\u063a", "\u0641"-"\u064a",
                "\u0671"-"\u06b7", "\u06ba"-"\u06be", "\u06c0"-"\u06ce", "\u06d0"-"\u06d3",
                "\u06d5", "\u06e5"-"\u06e6", "\u0905"-"\u0939", "\u093d", "\u0958"-"\u0961",
                "\u0985"-"\u098c", "\u098f"-"\u0990", "\u0993"-"\u09a8", "\u09aa"-"\u09b0",
                "\u09b2", "\u09b6"-"\u09b9", "\u09dc"-"\u09dd", "\u09df"-"\u09e1", "\u09f0"-"\u09f1",
                "\u0a05"-"\u0a0a", "\u0a0f"-"\u0a10", "\u0a13"-"\u0a28", "\u0a2a"-"\u0a30",
                "\u0a32"-"\u0a33", "\u0a35"-"\u0a36", "\u0a38"-"\u0a39", "\u0a59"-"\u0a5c",
                "\u0a5e", "\u0a72"-"\u0a74", "\u0a85"-"\u0a8b", "\u0a8d", "\u0a8f"-"\u0a91",
                "\u0a93"-"\u0aa8", "\u0aaa"-"\u0ab0", "\u0ab2"-"\u0ab3", "\u0ab5"-"\u0ab9",
                "\u0abd", "\u0ae0", "\u0b05"-"\u0b0c", "\u0b0f"-"\u0b10", "\u0b13"-"\u0b28",
                "\u0b2a"-"\u0b30", "\u0b32"-"\u0b33", "\u0b36"-"\u0b39", "\u0b3d", "\u0b5c"-"\u0b5d",
                "\u0b5f"-"\u0b61", "\u0b85"-"\u0b8a", "\u0b8e"-"\u0b90", "\u0b92"-"\u0b95", "\u0b99"-"\u0b9a",
                "\u0b9c", "\u0b9e"-"\u0b9f", "\u0ba3"-"\u0ba4", "\u0ba8"-"\u0baa", "\u0bae"-"\u0bb5",
                "\u0bb7"-"\u0bb9", "\u0c05"-"\u0c0c", "\u0c0e"-"\u0c10", "\u0c12"-"\u0c28",
                "\u0c2a"-"\u0c33", "\u0c35"-"\u0c39", "\u0c60"-"\u0c61", "\u0c85"-"\u0c8c",
                "\u0c8e"-"\u0c90", "\u0c92"-"\u0ca8", "\u0caa"-"\u0cb3", "\u0cb5"-"\u0cb9",
                "\u0cde", "\u0ce0"-"\u0ce1", "\u0d05"-"\u0d0c", "\u0d0e"-"\u0d10", "\u0d12"-"\u0d28",
                "\u0d2a"-"\u0d39", "\u0d60"-"\u0d61", "\u0e01"-"\u0e2e", "\u0e30", "\u0e32"-"\u0e33",
                "\u0e40"-"\u0e45", "\u0e81"-"\u0e82", "\u0e84", "\u0e87"-"\u0e88", "\u0e8a", "\u0e8d",
                "\u0e94"-"\u0e97", "\u0e99"-"\u0e9f", "\u0ea1"-"\u0ea3", "\u0ea5", "\u0ea7",
                "\u0eaa"-"\u0eab", "\u0ead"-"\u0eae", "\u0eb0", "\u0eb2"-"\u0eb3", "\u0ebd",
                "\u0ec0"-"\u0ec4", "\u0f40"-"\u0f47", "\u0f49"-"\u0f69", "\u10a0"-"\u10c5",
                "\u10d0"-"\u10f6", "\u1100", "\u1102"-"\u1103", "\u1105"-"\u1107", "\u1109",
                "\u110b"-"\u110c", "\u110e"-"\u1112", "\u113c", "\u113e", "\u1140", "\u114c", "\u114e",
                "\u1150", "\u1154"-"\u1155", "\u1159", "\u115f"-"\u1161", "\u1163", "\u1165", "\u1167",
                "\u1169", "\u116d"-"\u116e", "\u1172"-"\u1173", "\u1175", "\u119e", "\u11a8", "\u11ab",
                "\u11ae"-"\u11af", "\u11b7"-"\u11b8", "\u11ba", "\u11bc"-"\u11c2", "\u11eb", "\u11f0", "\u11f9",
                "\u1e00"-"\u1e9b", "\u1ea0"-"\u1ef9", "\u1f00"-"\u1f15", "\u1f18"-"\u1f1d", "\u1f20"-"\u1f45",
                "\u1f48"-"\u1f4d", "\u1f50"-"\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f"-"\u1f7d",
                "\u1f80"-"\u1fb4", "\u1fb6"-"\u1fbc", "\u1fbe", "\u1fc2"-"\u1fc4", "\u1fc6"-"\u1fcc",
                "\u1fd0"-"\u1fd3", "\u1fd6"-"\u1fdb", "\u1fe0"-"\u1fec", "\u1ff2"-"\u1ff4", "\u1ff6"-"\u1ffc",
                "\u2126", "\u212a"-"\u212b", "\u212e", "\u2180"-"\u2182", "\u3041"-"\u3094", "\u30a1"-"\u30fa",
                "\u3105"-"\u312c", "\uac00"-"\ud7a3"
             ]
   >

| < #IDEOGRAPHIC: ["\u4e00"-"\u9fa5", "\u3007", "\u3021"-"\u3029"]>

| < #DIGIT:
      [
       "0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f",
       "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"
      ]
  >
| < #EXTENDER: ["\u00b7", "\u02d0", "\u02d1", "\u0387", "\u0640", "\u0e46",
                "\u0ec6", "\u3005", "\u3031"-"\u3035", "\u309d"-"\u309e", "\u30fc"-"\u30fe"
                ]
  >

| < #COMBININGCHAR: [
                "\u0300"-"\u0345", "\u0360"-"\u0361", "\u0483"-"\u0486", "\u0591"-"\u05a1",
                "\u05a3"-"\u05b9", "\u05bb"-"\u05bd", "\u05bf", "\u05c1"-"\u05c2", "\u05c4",
                "\u064b"-"\u0652", "\u0670", "\u06d6"-"\u06dc", "\u06dd"-"\u06df", "\u06e0"-"\u06e4",
                "\u06e7"-"\u06e8", "\u06ea"-"\u06ed", "\u0901"-"\u0903", "\u093c", "\u093e"-"\u094c",
                "\u094d", "\u0951"-"\u0954", "\u0962"-"\u0963", "\u0981"-"\u0983", "\u09bc",
                "\u09be", "\u09bf", "\u09c0"-"\u09c4", "\u09c7"-"\u09c8", "\u09cb"-"\u09cd",
                "\u09d7", "\u09e2"-"\u09e3", "\u0a02", "\u0a3c", "\u0a3e", "\u0a3f", "\u0a40"-"\u0a42",
                "\u0a47"-"\u0a48", "\u0a4b"-"\u0a4d", "\u0a70"-"\u0a71", "\u0a81"-"\u0a83",
                "\u0abc", "\u0abe"-"\u0ac5", "\u0ac7"-"\u0ac9", "\u0acb"-"\u0acd",
                "\u0b01"-"\u0b03", "\u0b3c", "\u0b3e"-"\u0b43", "\u0b47"-"\u0b48",
                "\u0b4b"-"\u0b4d", "\u0b56"-"\u0b57", "\u0b82"-"\u0b83", "\u0bbe"-"\u0bc2",
                "\u0bc6"-"\u0bc8", "\u0bca"-"\u0bcd", "\u0bd7", "\u0c01"-"\u0c03", "\u0c3e"-"\u0c44",
                "\u0c46"-"\u0c48", "\u0c4a"-"\u0c4d", "\u0c55"-"\u0c56", "\u0c82"-"\u0c83",
                "\u0cbe"-"\u0cc4", "\u0cc6"-"\u0cc8", "\u0cca"-"\u0ccd", "\u0cd5"-"\u0cd6",
                "\u0d02"-"\u0d03", "\u0d3e"-"\u0d43", "\u0d46"-"\u0d48", "\u0d4a"-"\u0d4d",
                "\u0d57", "\u0e31", "\u0e34"-"\u0e3a", "\u0e47"-"\u0e4e", "\u0eb1", "\u0eb4"-"\u0eb9",
                "\u0ebb"-"\u0ebc", "\u0ec8"-"\u0ecd", "\u0f18"-"\u0f19", "\u0f35", "\u0f37", "\u0f39",
                "\u0f3e", "\u0f3f", "\u0f71"-"\u0f84", "\u0f86"-"\u0f8b", "\u0f90"-"\u0f95", "\u0f97",
                "\u0f99"-"\u0fad", "\u0fb1"-"\u0fb7", "\u0fb9", "\u20d0"-"\u20dc", "\u20e1", "\u302a"-"\u302f",
                "\u3099", "\u309a"
             ]
   >
}


SimpleNode Start() throws Exception : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
   try {
/*@egen*/
   ElmtConstructor()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { return jjtn000; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void  ElmtConstructor()throws Exception:{/*@bgen(jjtree) ElmtConstructor */
  ASTElmtConstructor jjtn000 = new ASTElmtConstructor(JJTELMTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElmtConstructor */
   try {
/*@egen*/
   LOOKAHEAD(<LESS_THAN> QName() AttList() <SLASH_GREATER_THAN>)
   <LESS_THAN> QName() AttList() <SLASH_GREATER_THAN>
   | <LESS_THAN> QName() (AttList())? <GREATER_THAN>  (ElmtContent())+ EndTag()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ElmtContent()throws Exception:{/*@bgen(jjtree) ElmtContent */
  ASTElmtContent jjtn000 = new ASTElmtContent(JJTELMTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElmtContent */
   try {
/*@egen*/
   ElmtConstructor()
   | (LOOKAHEAD(2) EnclosedExpr())+/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void EndTag()throws Exception:{/*@bgen(jjtree) EndTag */
  ASTEndTag jjtn000 = new ASTEndTag(JJTENDTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EndTag */
   try {
/*@egen*/
   <LESS_THAN_SLASH>  QName() <GREATER_THAN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AttList()throws Exception:{/*@bgen(jjtree) AttList */
  ASTAttList jjtn000 = new ASTAttList(JJTATTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttList */
   try {
/*@egen*/
   AttributeValuePair() (LOOKAHEAD(2) AttList())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AttributeValuePair()throws Exception:{/*@bgen(jjtree) AttributeValuePair */
  ASTAttributeValuePair jjtn000 = new ASTAttributeValuePair(JJTATTRIBUTEVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttributeValuePair */
   try {
/*@egen*/
   QName() <EQUALS> AttValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AttValue()throws Exception:{/*@bgen(jjtree) AttValue */
  ASTAttValue jjtn000 = new ASTAttValue(JJTATTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttValue */
     try {
/*@egen*/
     <QUOTE> AttValueContent() <QUOTE>
   |
     <SINGLEQUOTE> AttValueContent() <SINGLEQUOTE>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       if (jjte000 instanceof Exception) {
         throw (Exception)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void AttValueContent()throws Exception:{/*@bgen(jjtree) AttValueContent */
  ASTAttValueContent jjtn000 = new ASTAttValueContent(JJTATTVALUECONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttValueContent */
   try {
/*@egen*/
   <L_BRACE> PathExpr() <R_BRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void PathExpr()throws Exception:{/*@bgen(jjtree) PathExpr */
  ASTPathExpr jjtn000 = new ASTPathExpr(JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PathExpr */
   try {
/*@egen*/
   <DOLLAR> VarName() SimplePathExpr()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SimplePathExpr()throws Exception:{/*@bgen(jjtree) SimplePathExpr */
  ASTSimplePathExpr jjtn000 = new ASTSimplePathExpr(JJTSIMPLEPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimplePathExpr */
   try {
/*@egen*/
   ((Slash() | DoubleSlash()) QName())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void VarName()throws Exception:{/*@bgen(jjtree) VarName */
                                ASTVarName jjtn000 = new ASTVarName(JJTVARNAME);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) VarName */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EnclosedExpr()throws Exception:{/*@bgen(jjtree) EnclosedExpr */
  ASTEnclosedExpr jjtn000 = new ASTEnclosedExpr(JJTENCLOSEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnclosedExpr */
   try {
/*@egen*/
   <L_BRACE> (FLWORExpr() | PathExpr() | FunctionExpr() ) <R_BRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void FunctionExpr()throws Exception:{/*@bgen(jjtree) FunctionExpr */
  ASTFunctionExpr jjtn000 = new ASTFunctionExpr(JJTFUNCTIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionExpr */
  try {
/*@egen*/
  (FuncCount() | FuncMax() | FuncMin() | FuncSum() | FuncAverage()) <L_PAREN> PathExpr() <R_PAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof Exception) {
      throw (Exception)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FuncCount()throws Exception:{/*@bgen(jjtree) FuncCount */
                                  ASTFuncCount jjtn000 = new ASTFuncCount(JJTFUNCCOUNT);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FuncCount */
  try {
/*@egen*/
  t=<COUNT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void FuncMax()throws Exception:{/*@bgen(jjtree) FuncMax */
                                ASTFuncMax jjtn000 = new ASTFuncMax(JJTFUNCMAX);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FuncMax */
  try {
/*@egen*/
  t=<MAX>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void FuncMin()throws Exception:{/*@bgen(jjtree) FuncMin */
                                ASTFuncMin jjtn000 = new ASTFuncMin(JJTFUNCMIN);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FuncMin */
  try {
/*@egen*/
  t=<MIN>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void FuncSum()throws Exception:{/*@bgen(jjtree) FuncSum */
                                ASTFuncSum jjtn000 = new ASTFuncSum(JJTFUNCSUM);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FuncSum */
  try {
/*@egen*/
  t=<SUM>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void FuncAverage()throws Exception:{/*@bgen(jjtree) FuncAverage */
                                    ASTFuncAverage jjtn000 = new ASTFuncAverage(JJTFUNCAVERAGE);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FuncAverage */
  try {
/*@egen*/
  t=<AVERAGE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FLWORExpr()throws Exception:{/*@bgen(jjtree) FLWORExpr */
  ASTFLWORExpr jjtn000 = new ASTFLWORExpr(JJTFLWOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FLWORExpr */
   try {
/*@egen*/
   ((ForClause() | LetClause())+ (WhereClause())? (OrderByClause())? Return() )* ElmtConstructor()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ForClause()throws Exception:{/*@bgen(jjtree) ForClause */
  ASTForClause jjtn000 = new ASTForClause(JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForClause */
   try {
/*@egen*/
   <FOR> <DOLLAR> VarName() <IN> (DocumentExpr() | PathExpr())  (<COMMA> <DOLLAR> VarName() <IN> (DocumentExpr() | PathExpr()))*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void LetClause()throws Exception:{/*@bgen(jjtree) LetClause */
  ASTLetClause jjtn000 = new ASTLetClause(JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LetClause */
   try {
/*@egen*/
   <LET> <DOLLAR> VarName() <ASSIGN> (DocumentExpr() | PathExpr()) (<COMMA> <DOLLAR> VarName() <ASSIGN> (DocumentExpr() | PathExpr()))*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void DocumentExpr()throws Exception:{/*@bgen(jjtree) DocumentExpr */
  ASTDocumentExpr jjtn000 = new ASTDocumentExpr(JJTDOCUMENTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DocumentExpr */
   try {
/*@egen*/
   LOOKAHEAD(3)
   
     <DOCUMENT> <L_PAREN> <QUOTE> QName() (<XML>)? <QUOTE> <R_PAREN> SimplePathExpr()
   | 
     <DOCUMENT> <L_PAREN> <SINGLEQUOTE> QName() (<XML>)? <SINGLEQUOTE> <R_PAREN> SimplePathExpr()
   |
     <DOCUMENT> <L_PAREN> <QUOTE> QName() (<XML>)? <QUOTE> <COMMA> <QUOTE> QName() <QUOTE> <R_PAREN> SimplePathExpr()
   | 
     <DOCUMENT> <L_PAREN> <SINGLEQUOTE> QName() (<XML>)? <SINGLEQUOTE> <COMMA> <SINGLEQUOTE> QName() <SINGLEQUOTE> <R_PAREN> SimplePathExpr()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void WhereClause()throws Exception:{/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhereClause */
   try {
/*@egen*/
   <WHERE> Expr()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void OrderByClause()throws Exception:{/*@bgen(jjtree) OrderByClause */
  ASTOrderByClause jjtn000 = new ASTOrderByClause(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderByClause */
   try {
/*@egen*/
   ("order by" | "ORDER BY") OrderSpecList()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void OrderSpecList()throws Exception:{/*@bgen(jjtree) OrderSpecList */
  ASTOrderSpecList jjtn000 = new ASTOrderSpecList(JJTORDERSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderSpecList */
   try {
/*@egen*/
   OrderSpec() (<COMMA> OrderSpec())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void OrderSpec()throws Exception:{/*@bgen(jjtree) OrderSpec */
  ASTOrderSpec jjtn000 = new ASTOrderSpec(JJTORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderSpec */
   try {
/*@egen*/
   PathExpr() [OrderAscending() | OrderDescending()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void OrderAscending()throws Exception:{/*@bgen(jjtree) OrderAscending */
  ASTOrderAscending jjtn000 = new ASTOrderAscending(JJTORDERASCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderAscending */
        try {
/*@egen*/
	<ASCENDING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OrderDescending()throws Exception:{/*@bgen(jjtree) OrderDescending */
  ASTOrderDescending jjtn000 = new ASTOrderDescending(JJTORDERDESCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderDescending */
        try {
/*@egen*/
	<DESCENDING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Return()throws Exception:{/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
   try {
/*@egen*/
   <RETURN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Expr()throws Exception:{/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
   try {
/*@egen*/
   OrExpr()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void OrExpr()throws Exception:{/*@bgen(jjtree) OrExpr */
  ASTOrExpr jjtn000 = new ASTOrExpr(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrExpr */
   try {
/*@egen*/
   AndExpr() (<OR> AndExpr())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void AndExpr()throws Exception:{/*@bgen(jjtree) AndExpr */
  ASTAndExpr jjtn000 = new ASTAndExpr(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpr */
   try {
/*@egen*/
   ComparisonExpr() (<AND> ComparisonExpr())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ComparisonExpr()throws Exception:{/*@bgen(jjtree) ComparisonExpr */
  ASTComparisonExpr jjtn000 = new ASTComparisonExpr(JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonExpr */
   try {
/*@egen*/
   ValueExpr() (GeneralComp() ValueExpr())?/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ValueExpr()throws Exception:{/*@bgen(jjtree) ValueExpr */
  ASTValueExpr jjtn000 = new ASTValueExpr(JJTVALUEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueExpr */
   try {
/*@egen*/
   FunctionExpr() | PathExpr() | PrimaryExpr()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void GeneralComp()throws Exception:{/*@bgen(jjtree) GeneralComp */
  ASTGeneralComp jjtn000 = new ASTGeneralComp(JJTGENERALCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GeneralComp */
      try {
/*@egen*/
      Equals()
    | LessThan()
    | LessThanEquals()
    | GreaterThan()
    | GreaterThanEquals()
    | NotEquals()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        if (jjte000 instanceof Exception) {
          throw (Exception)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void Equals()throws Exception:{/*@bgen(jjtree) Equals */
                               ASTEquals jjtn000 = new ASTEquals(JJTEQUALS);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Equals */
      try {
/*@egen*/
      t=<EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void LessThan()throws Exception:{/*@bgen(jjtree) LessThan */
                                 ASTLessThan jjtn000 = new ASTLessThan(JJTLESSTHAN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LessThan */
    try {
/*@egen*/
    t=<LESS_THAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThanEquals()throws Exception:{/*@bgen(jjtree) LessThanEquals */
                                       ASTLessThanEquals jjtn000 = new ASTLessThanEquals(JJTLESSTHANEQUALS);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LessThanEquals */
     try {
/*@egen*/
     t=<LESS_THAN_EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void GreaterThan()throws Exception:{/*@bgen(jjtree) GreaterThan */
                                    ASTGreaterThan jjtn000 = new ASTGreaterThan(JJTGREATERTHAN);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GreaterThan */
    try {
/*@egen*/
    t=<GREATER_THAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanEquals()throws Exception:{/*@bgen(jjtree) GreaterThanEquals */
                                          ASTGreaterThanEquals jjtn000 = new ASTGreaterThanEquals(JJTGREATERTHANEQUALS);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GreaterThanEquals */
    try {
/*@egen*/
    t=<GREATER_THAN_EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotEquals()throws Exception:{/*@bgen(jjtree) NotEquals */
                                  ASTNotEquals jjtn000 = new ASTNotEquals(JJTNOTEQUALS);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NotEquals */
    try {
/*@egen*/
    t=<NOT_EQUALS>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrimaryExpr()throws Exception:{/*@bgen(jjtree) PrimaryExpr */
  ASTPrimaryExpr jjtn000 = new ASTPrimaryExpr(JJTPRIMARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpr */
   try {
/*@egen*/
   Literal() | ParenthesizedExpr()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Literal()throws Exception:{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
   try {
/*@egen*/
   NumericalLiteral() | StringLiteral()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void NumericalLiteral()throws Exception:{/*@bgen(jjtree) NumericalLiteral */
  ASTNumericalLiteral jjtn000 = new ASTNumericalLiteral(JJTNUMERICALLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NumericalLiteral */
   try {
/*@egen*/
   IntegerLiteral() | DecimalLiteral() | DoubleLiteral()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ParenthesizedExpr()throws Exception:{/*@bgen(jjtree) ParenthesizedExpr */
  ASTParenthesizedExpr jjtn000 = new ASTParenthesizedExpr(JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParenthesizedExpr */
   try {
/*@egen*/
   <L_PAREN> (Expr())? <R_PAREN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof Exception) {
       throw (Exception)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void UnionExpr()throws Exception:{/*@bgen(jjtree) UnionExpr */
  ASTUnionExpr jjtn000 = new ASTUnionExpr(JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnionExpr */
  try {
/*@egen*/
  <L_PAREN> <DOLLAR> VarName() <SLASH> QName() ((<UNION> | <BAR>) <DOLLAR> VarName() <SLASH> QName())* <R_PAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof Exception) {
      throw (Exception)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void QName()throws Exception:{/*@bgen(jjtree) QName */
                              ASTQName jjtn000 = new ASTQName(JJTQNAME);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) QName */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Slash()throws Exception:{/*@bgen(jjtree) Slash */
                              ASTSlash jjtn000 = new ASTSlash(JJTSLASH);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) Slash */
  try {
/*@egen*/
  t=<SLASH>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DoubleSlash()throws Exception:{/*@bgen(jjtree) DoubleSlash */
                                    ASTDoubleSlash jjtn000 = new ASTDoubleSlash(JJTDOUBLESLASH);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) DoubleSlash */
  try {
/*@egen*/
  t=<SLASHSLASH>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IntegerLiteral()throws Exception:{/*@bgen(jjtree) IntegerLiteral */
                                       ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IntegerLiteral */
  try {
/*@egen*/
  t=<DIGITS>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DecimalLiteral()throws Exception:{/*@bgen(jjtree) DecimalLiteral */
                                       ASTDecimalLiteral jjtn000 = new ASTDecimalLiteral(JJTDECIMALLITERAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DecimalLiteral */
  try {
/*@egen*/
  t=<DECIMALLITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DoubleLiteral()throws Exception:{/*@bgen(jjtree) DoubleLiteral */
                                      ASTDoubleLiteral jjtn000 = new ASTDoubleLiteral(JJTDOUBLELITERAL);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DoubleLiteral */
  try {
/*@egen*/
  t=<DOUBLELITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StringLiteral()throws Exception:{/*@bgen(jjtree) StringLiteral */
                                      ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StringLiteral */
  try {
/*@egen*/
  t=<STRINGLITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setToken(t.kind,t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
