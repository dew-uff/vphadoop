/* Generated By:JJTree&JavaCC: Do not edit this line. XQueryParser.java */
package mediadorxml.javaccparser;
public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants, XQueryParserConstants {/*@bgen(jjtree)*/
  protected JJTXQueryParserState jjtree = new JJTXQueryParserState();

  final public SimpleNode Start() throws ParseException, Exception {
                                       /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElmtConstructor();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ElmtConstructor() throws ParseException, Exception {
                                         /*@bgen(jjtree) ElmtConstructor */
  ASTElmtConstructor jjtn000 = new ASTElmtConstructor(JJTELMTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        jj_consume_token(LESS_THAN);
        QName();
        AttList();
        jj_consume_token(SLASH_GREATER_THAN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS_THAN:
          jj_consume_token(LESS_THAN);
          QName();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            AttList();
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          jj_consume_token(GREATER_THAN);
          label_1:
          while (true) {
            ElmtContent();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case L_BRACE:
            case LESS_THAN:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_1;
            }
          }
          EndTag();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ElmtContent() throws ParseException, Exception {
                                    /*@bgen(jjtree) ElmtContent */
  ASTElmtContent jjtn000 = new ASTElmtContent(JJTELMTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        ElmtConstructor();
        break;
      case L_BRACE:
        label_2:
        while (true) {
          EnclosedExpr();
          if (jj_2_2(2)) {
            ;
          } else {
            break label_2;
          }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void EndTag() throws ParseException, Exception {
                               /*@bgen(jjtree) EndTag */
  ASTEndTag jjtn000 = new ASTEndTag(JJTENDTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LESS_THAN_SLASH);
      QName();
      jj_consume_token(GREATER_THAN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AttList() throws ParseException, Exception {
                                /*@bgen(jjtree) AttList */
  ASTAttList jjtn000 = new ASTAttList(JJTATTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AttributeValuePair();
      if (jj_2_3(2)) {
        AttList();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AttributeValuePair() throws ParseException, Exception {
                                           /*@bgen(jjtree) AttributeValuePair */
  ASTAttributeValuePair jjtn000 = new ASTAttributeValuePair(JJTATTRIBUTEVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
      jj_consume_token(EQUALS);
      AttValue();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AttValue() throws ParseException, Exception {
                                 /*@bgen(jjtree) AttValue */
  ASTAttValue jjtn000 = new ASTAttValue(JJTATTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTE:
        jj_consume_token(QUOTE);
        AttValueContent();
        jj_consume_token(QUOTE);
        break;
      case SINGLEQUOTE:
        jj_consume_token(SINGLEQUOTE);
        AttValueContent();
        jj_consume_token(SINGLEQUOTE);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       if (jjte000 instanceof Exception) {
         {if (true) throw (Exception)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void AttValueContent() throws ParseException, Exception {
                                        /*@bgen(jjtree) AttValueContent */
  ASTAttValueContent jjtn000 = new ASTAttValueContent(JJTATTVALUECONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(L_BRACE);
      PathExpr();
      jj_consume_token(R_BRACE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PathExpr() throws ParseException, Exception {
                                 /*@bgen(jjtree) PathExpr */
  ASTPathExpr jjtn000 = new ASTPathExpr(JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLLAR);
      VarName();
      SimplePathExpr();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SimplePathExpr() throws ParseException, Exception {
                                       /*@bgen(jjtree) SimplePathExpr */
  ASTSimplePathExpr jjtn000 = new ASTSimplePathExpr(JJTSIMPLEPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
        case SLASHSLASH:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
          Slash();
          break;
        case SLASHSLASH:
          DoubleSlash();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        QName();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void VarName() throws ParseException, Exception {
                                /*@bgen(jjtree) VarName */
                                ASTVarName jjtn000 = new ASTVarName(JJTVARNAME);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnclosedExpr() throws ParseException, Exception {
                                     /*@bgen(jjtree) EnclosedExpr */
  ASTEnclosedExpr jjtn000 = new ASTEnclosedExpr(JJTENCLOSEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(L_BRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case LET:
      case LESS_THAN:
        FLWORExpr();
        break;
      case DOLLAR:
        PathExpr();
        break;
      case COUNT:
      case MAX:
      case MIN:
      case AVERAGE:
      case SUM:
        FunctionExpr();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(R_BRACE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void FunctionExpr() throws ParseException, Exception {
                                     /*@bgen(jjtree) FunctionExpr */
  ASTFunctionExpr jjtn000 = new ASTFunctionExpr(JJTFUNCTIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
        FuncCount();
        break;
      case MAX:
        FuncMax();
        break;
      case MIN:
        FuncMin();
        break;
      case SUM:
        FuncSum();
        break;
      case AVERAGE:
        FuncAverage();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(L_PAREN);
      PathExpr();
      jj_consume_token(R_PAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncCount() throws ParseException, Exception {
                                  /*@bgen(jjtree) FuncCount */
                                  ASTFuncCount jjtn000 = new ASTFuncCount(JJTFUNCCOUNT);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COUNT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncMax() throws ParseException, Exception {
                                /*@bgen(jjtree) FuncMax */
                                ASTFuncMax jjtn000 = new ASTFuncMax(JJTFUNCMAX);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAX);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncMin() throws ParseException, Exception {
                                /*@bgen(jjtree) FuncMin */
                                ASTFuncMin jjtn000 = new ASTFuncMin(JJTFUNCMIN);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MIN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncSum() throws ParseException, Exception {
                                /*@bgen(jjtree) FuncSum */
                                ASTFuncSum jjtn000 = new ASTFuncSum(JJTFUNCSUM);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SUM);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FuncAverage() throws ParseException, Exception {
                                    /*@bgen(jjtree) FuncAverage */
                                    ASTFuncAverage jjtn000 = new ASTFuncAverage(JJTFUNCAVERAGE);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(AVERAGE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FLWORExpr() throws ParseException, Exception {
                                  /*@bgen(jjtree) FLWORExpr */
  ASTFLWORExpr jjtn000 = new ASTFLWORExpr(JJTFLWOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case LET:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
            ForClause();
            break;
          case LET:
            LetClause();
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
          case LET:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          WhereClause();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
        case 66:
          OrderByClause();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        Return();
      }
      ElmtConstructor();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ForClause() throws ParseException, Exception {
                                  /*@bgen(jjtree) ForClause */
  ASTForClause jjtn000 = new ASTForClause(JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENT:
        DocumentExpr();
        break;
      case DOLLAR:
        PathExpr();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(IN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOCUMENT:
          DocumentExpr();
          break;
        case DOLLAR:
          PathExpr();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void LetClause() throws ParseException, Exception {
                                  /*@bgen(jjtree) LetClause */
  ASTLetClause jjtn000 = new ASTLetClause(JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LET);
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOCUMENT:
        DocumentExpr();
        break;
      case DOLLAR:
        PathExpr();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOCUMENT:
          DocumentExpr();
          break;
        case DOLLAR:
          PathExpr();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DocumentExpr() throws ParseException, Exception {
                                     /*@bgen(jjtree) DocumentExpr */
  ASTDocumentExpr jjtn000 = new ASTDocumentExpr(JJTDOCUMENTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(3)) {
        jj_consume_token(DOCUMENT);
        jj_consume_token(L_PAREN);
        jj_consume_token(QUOTE);
        QName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XML:
          jj_consume_token(XML);
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(QUOTE);
        jj_consume_token(R_PAREN);
        SimplePathExpr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOCUMENT:
          jj_consume_token(DOCUMENT);
          jj_consume_token(L_PAREN);
          jj_consume_token(SINGLEQUOTE);
          QName();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case XML:
            jj_consume_token(XML);
            break;
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          jj_consume_token(SINGLEQUOTE);
          jj_consume_token(R_PAREN);
          SimplePathExpr();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void WhereClause() throws ParseException, Exception {
                                    /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHERE);
      Expr();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OrderByClause() throws ParseException, Exception {
                                      /*@bgen(jjtree) OrderByClause */
  ASTOrderByClause jjtn000 = new ASTOrderByClause(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        jj_consume_token(65);
        break;
      case 66:
        jj_consume_token(66);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      OrderSpecList();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OrderSpecList() throws ParseException, Exception {
                                      /*@bgen(jjtree) OrderSpecList */
  ASTOrderSpecList jjtn000 = new ASTOrderSpecList(JJTORDERSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrderSpec();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        OrderSpec();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OrderSpec() throws ParseException, Exception {
                                  /*@bgen(jjtree) OrderSpec */
  ASTOrderSpec jjtn000 = new ASTOrderSpec(JJTORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PathExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASCENDING:
      case DESCENDING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASCENDING:
          OrderAscending();
          break;
        case DESCENDING:
          OrderDescending();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OrderAscending() throws ParseException, Exception {
                                       /*@bgen(jjtree) OrderAscending */
  ASTOrderAscending jjtn000 = new ASTOrderAscending(JJTORDERASCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASCENDING);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void OrderDescending() throws ParseException, Exception {
                                        /*@bgen(jjtree) OrderDescending */
  ASTOrderDescending jjtn000 = new ASTOrderDescending(JJTORDERDESCENDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DESCENDING);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Return() throws ParseException, Exception {
                               /*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Expr() throws ParseException, Exception {
                             /*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrExpr();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void OrExpr() throws ParseException, Exception {
                               /*@bgen(jjtree) OrExpr */
  ASTOrExpr jjtn000 = new ASTOrExpr(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpr();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_9;
        }
        jj_consume_token(OR);
        AndExpr();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AndExpr() throws ParseException, Exception {
                                /*@bgen(jjtree) AndExpr */
  ASTAndExpr jjtn000 = new ASTAndExpr(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComparisonExpr();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
        jj_consume_token(AND);
        ComparisonExpr();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ComparisonExpr() throws ParseException, Exception {
                                       /*@bgen(jjtree) ComparisonExpr */
  ASTComparisonExpr jjtn000 = new ASTComparisonExpr(JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ValueExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case LESS_THAN:
      case LESS_THAN_EQUALS:
      case GREATER_THAN:
      case GREATER_THAN_EQUALS:
      case NOT_EQUALS:
        GeneralComp();
        ValueExpr();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ValueExpr() throws ParseException, Exception {
                                  /*@bgen(jjtree) ValueExpr */
  ASTValueExpr jjtn000 = new ASTValueExpr(JJTVALUEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
      case MAX:
      case MIN:
      case AVERAGE:
      case SUM:
        FunctionExpr();
        break;
      case DOLLAR:
        PathExpr();
        break;
      case L_PAREN:
      case DIGITS:
      case DECIMALLITERAL:
      case DOUBLELITERAL:
      case STRINGLITERAL:
        PrimaryExpr();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void GeneralComp() throws ParseException, Exception {
                                    /*@bgen(jjtree) GeneralComp */
  ASTGeneralComp jjtn000 = new ASTGeneralComp(JJTGENERALCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        Equals();
        break;
      case LESS_THAN:
        LessThan();
        break;
      case LESS_THAN_EQUALS:
        LessThanEquals();
        break;
      case GREATER_THAN:
        GreaterThan();
        break;
      case GREATER_THAN_EQUALS:
        GreaterThanEquals();
        break;
      case NOT_EQUALS:
        NotEquals();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        if (jjte000 instanceof Exception) {
          {if (true) throw (Exception)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void Equals() throws ParseException, Exception {
                               /*@bgen(jjtree) Equals */
                               ASTEquals jjtn000 = new ASTEquals(JJTEQUALS);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EQUALS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setToken(t.kind,t.image);
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void LessThan() throws ParseException, Exception {
                                 /*@bgen(jjtree) LessThan */
                                 ASTLessThan jjtn000 = new ASTLessThan(JJTLESSTHAN);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LESS_THAN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setToken(t.kind,t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LessThanEquals() throws ParseException, Exception {
                                       /*@bgen(jjtree) LessThanEquals */
                                       ASTLessThanEquals jjtn000 = new ASTLessThanEquals(JJTLESSTHANEQUALS);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LESS_THAN_EQUALS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setToken(t.kind,t.image);
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void GreaterThan() throws ParseException, Exception {
                                    /*@bgen(jjtree) GreaterThan */
                                    ASTGreaterThan jjtn000 = new ASTGreaterThan(JJTGREATERTHAN);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GREATER_THAN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setToken(t.kind,t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GreaterThanEquals() throws ParseException, Exception {
                                          /*@bgen(jjtree) GreaterThanEquals */
                                          ASTGreaterThanEquals jjtn000 = new ASTGreaterThanEquals(JJTGREATERTHANEQUALS);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GREATER_THAN_EQUALS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setToken(t.kind,t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NotEquals() throws ParseException, Exception {
                                  /*@bgen(jjtree) NotEquals */
                                  ASTNotEquals jjtn000 = new ASTNotEquals(JJTNOTEQUALS);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT_EQUALS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setToken(t.kind,t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PrimaryExpr() throws ParseException, Exception {
                                    /*@bgen(jjtree) PrimaryExpr */
  ASTPrimaryExpr jjtn000 = new ASTPrimaryExpr(JJTPRIMARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
      case DECIMALLITERAL:
      case DOUBLELITERAL:
      case STRINGLITERAL:
        Literal();
        break;
      case L_PAREN:
        ParenthesizedExpr();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Literal() throws ParseException, Exception {
                                /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
      case DECIMALLITERAL:
      case DOUBLELITERAL:
        NumericalLiteral();
        break;
      case STRINGLITERAL:
        StringLiteral();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NumericalLiteral() throws ParseException, Exception {
                                         /*@bgen(jjtree) NumericalLiteral */
  ASTNumericalLiteral jjtn000 = new ASTNumericalLiteral(JJTNUMERICALLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITS:
        IntegerLiteral();
        break;
      case DECIMALLITERAL:
        DecimalLiteral();
        break;
      case DOUBLELITERAL:
        DoubleLiteral();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ParenthesizedExpr() throws ParseException, Exception {
                                          /*@bgen(jjtree) ParenthesizedExpr */
  ASTParenthesizedExpr jjtn000 = new ASTParenthesizedExpr(JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(L_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_PAREN:
      case DOLLAR:
      case COUNT:
      case MAX:
      case MIN:
      case AVERAGE:
      case SUM:
      case DIGITS:
      case DECIMALLITERAL:
      case DOUBLELITERAL:
      case STRINGLITERAL:
        Expr();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(R_PAREN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof Exception) {
       {if (true) throw (Exception)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void UnionExpr() throws ParseException, Exception {
                                  /*@bgen(jjtree) UnionExpr */
  ASTUnionExpr jjtn000 = new ASTUnionExpr(JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(L_PAREN);
      jj_consume_token(DOLLAR);
      VarName();
      jj_consume_token(SLASH);
      QName();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BAR:
        case UNION:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNION:
          jj_consume_token(UNION);
          break;
        case BAR:
          jj_consume_token(BAR);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOLLAR);
        VarName();
        jj_consume_token(SLASH);
        QName();
      }
      jj_consume_token(R_PAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QName() throws ParseException, Exception {
                              /*@bgen(jjtree) QName */
                              ASTQName jjtn000 = new ASTQName(JJTQNAME);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Slash() throws ParseException, Exception {
                              /*@bgen(jjtree) Slash */
                              ASTSlash jjtn000 = new ASTSlash(JJTSLASH);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SLASH);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoubleSlash() throws ParseException, Exception {
                                    /*@bgen(jjtree) DoubleSlash */
                                    ASTDoubleSlash jjtn000 = new ASTDoubleSlash(JJTDOUBLESLASH);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SLASHSLASH);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IntegerLiteral() throws ParseException, Exception {
                                       /*@bgen(jjtree) IntegerLiteral */
                                       ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIGITS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DecimalLiteral() throws ParseException, Exception {
                                       /*@bgen(jjtree) DecimalLiteral */
                                       ASTDecimalLiteral jjtn000 = new ASTDecimalLiteral(JJTDECIMALLITERAL);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DECIMALLITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoubleLiteral() throws ParseException, Exception {
                                      /*@bgen(jjtree) DoubleLiteral */
                                      ASTDoubleLiteral jjtn000 = new ASTDoubleLiteral(JJTDOUBLELITERAL);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DOUBLELITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StringLiteral() throws ParseException, Exception {
                                      /*@bgen(jjtree) StringLiteral */
                                      ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRINGLITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setToken(t.kind,t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(SLASHSLASH)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(L_BRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(L_BRACE)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(R_BRACE)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(SINGLEQUOTE)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(SINGLEQUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(QUOTE)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(DOCUMENT)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(SLASH_GREATER_THAN)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(LET)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    if (jj_3R_33()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(AVERAGE)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  public XQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x40002000,0x40000000,0x40002000,0x0,0x18000000,0x18000000,0x60600000,0x0,0x600000,0x600000,0x600000,0x800000,0x0,0x20000000,0x80,0x20000000,0x20000000,0x80,0x20000000,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x8000,0x10000,0x40000100,0x20000200,0x40000100,0x200,0x0,0x0,0x20000200,0x60000,0x60000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x40000,0x0,0x0,0x0,0xc0,0x0,0x0,0x3e000,0x3e000,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x100,0x100,0x0,0x100,0x200,0x200,0x100,0x0,0x0,0x1800,0x1800,0x0,0x0,0x1b,0x393e000,0x1b,0x3900000,0x3900000,0x1900000,0x393e000,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XQueryParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XQueryParser(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[67];
    for (int i = 0; i < 67; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                           }
